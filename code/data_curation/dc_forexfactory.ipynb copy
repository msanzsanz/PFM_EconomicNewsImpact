{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data curation - Forex Factory\n",
    "\n",
    "\n",
    "Data from https://www.forexfactory.com/ was gotten using our own scrapper. Thus, we need to make some sanity checks to ensure the downloaded data corresponds to the expected one.\n",
    "\n",
    "Checks to do:\n",
    "\n",
    "1. No missing weeks.\n",
    "2. Same news released each year, with the same cadence.\n",
    "\n",
    "\n",
    "Unknow questions:\n",
    "\n",
    "1. Does forexfactory set the same impact rate to \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Findings\n",
    "\n",
    "1. News might have a different impact degree depending on the month. \n",
    "e.g. 'CB Consumer Confidence' for 2018. Always tagged as with \"high\" impact for 2018, but in August.\n",
    "\n",
    "\n",
    "----------\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pytz\n",
    "import path\n",
    "\n",
    "%pylab inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are going to define some global variables for the ease of reproducibility"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Global variables\n",
    "\n",
    "data_directory_news = '../data/news/'\n",
    "data_directory_rates = '../data/currency_rates/'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initial exploratory analysis, just for 2017 \n",
    "Let´s explore what we´ve obtained from forexfactory.com"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "ff_2017 = pd.read_csv(data_directory_news + 'forexfactory_2017.csv', parse_dates=[[3,10]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-12-31 00:00:00 12:00am</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NZD</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Non-Economic</td>\n",
       "      <td>Bank Holiday</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-12-31 00:00:00 12:00am</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AUD</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Non-Economic</td>\n",
       "      <td>Bank Holiday</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-12-31 00:00:00 12:00am</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>JPY</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Non-Economic</td>\n",
       "      <td>Bank Holiday</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-12-31 00:00:00 12:00am</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CNY</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Non-Economic</td>\n",
       "      <td>Bank Holiday</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-01-01 00:00:00 12:00am</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CHF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Non-Economic</td>\n",
       "      <td>Bank Holiday</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     date_time  Unnamed: 0 actual country forecast  \\\n",
       "0  2017-12-31 00:00:00 12:00am           0    NaN     NZD      NaN   \n",
       "1  2017-12-31 00:00:00 12:00am           1    NaN     AUD      NaN   \n",
       "2  2017-12-31 00:00:00 12:00am           2    NaN     JPY      NaN   \n",
       "3  2017-12-31 00:00:00 12:00am           3    NaN     CNY      NaN   \n",
       "4  2017-01-01 00:00:00 12:00am           4    NaN     CHF      NaN   \n",
       "\n",
       "  forecast_error        impact           new previous previous_error  \n",
       "0            NaN  Non-Economic  Bank Holiday      NaN            NaN  \n",
       "1            NaN  Non-Economic  Bank Holiday      NaN            NaN  \n",
       "2            NaN  Non-Economic  Bank Holiday      NaN            NaN  \n",
       "3            NaN  Non-Economic  Bank Holiday      NaN            NaN  \n",
       "4            NaN  Non-Economic  Bank Holiday      NaN            NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4644</td>\n",
       "      <td>3789</td>\n",
       "      <td>4644</td>\n",
       "      <td>3079</td>\n",
       "      <td>2150</td>\n",
       "      <td>4644</td>\n",
       "      <td>4644</td>\n",
       "      <td>3788</td>\n",
       "      <td>863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>3149</td>\n",
       "      <td>1357</td>\n",
       "      <td>10</td>\n",
       "      <td>1042</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>413</td>\n",
       "      <td>1375</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>2017-01-01 00:00:00 12:00am</td>\n",
       "      <td>0.4%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>better</td>\n",
       "      <td>Low</td>\n",
       "      <td>Trade Balance</td>\n",
       "      <td>0.4%</td>\n",
       "      <td>better</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>13</td>\n",
       "      <td>116</td>\n",
       "      <td>1201</td>\n",
       "      <td>170</td>\n",
       "      <td>1127</td>\n",
       "      <td>2247</td>\n",
       "      <td>100</td>\n",
       "      <td>116</td>\n",
       "      <td>487</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          date_time actual country forecast forecast_error  \\\n",
       "count                          4644   3789    4644     3079           2150   \n",
       "unique                         3149   1357      10     1042              2   \n",
       "top     2017-01-01 00:00:00 12:00am   0.4%     USD     0.2%         better   \n",
       "freq                             13    116    1201      170           1127   \n",
       "\n",
       "       impact            new previous previous_error  \n",
       "count    4644           4644     3788            863  \n",
       "unique      4            413     1375              2  \n",
       "top       Low  Trade Balance     0.4%         better  \n",
       "freq     2247            100      116            487  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017 = ff_2017.drop(columns = ['Unnamed: 0'])\n",
    "ff_2017.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date_time         object\n",
       "actual            object\n",
       "country           object\n",
       "forecast          object\n",
       "forecast_error    object\n",
       "impact            object\n",
       "new               object\n",
       "previous          object\n",
       "previous_error    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "ff_2017['forecast_error'] = ff_2017['forecast_error'].replace(np.nan, 'accurate', regex=True)\n",
    "ff_2017['previous_error'] = ff_2017['previous_error'].replace(np.nan, 'accurate', regex=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our preliminary analysis is going to be focused on **EUR-USD only**, so we filter the dataframe to only get **macroeconomic news from USA** (macroeconomic news = those which have a forecast)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2017-01-02 00:00:00 10:45am</td>\n",
       "      <td>55.1</td>\n",
       "      <td>USD</td>\n",
       "      <td>55.0</td>\n",
       "      <td>accurate</td>\n",
       "      <td>Low</td>\n",
       "      <td>Final Manufacturing PMI</td>\n",
       "      <td>55.0</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>2017-01-03 00:00:00 11:00am</td>\n",
       "      <td>59.7</td>\n",
       "      <td>USD</td>\n",
       "      <td>58.1</td>\n",
       "      <td>better</td>\n",
       "      <td>High</td>\n",
       "      <td>ISM Manufacturing PMI</td>\n",
       "      <td>58.2</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2017-01-03 00:00:00 11:00am</td>\n",
       "      <td>0.8%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.6%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>Low</td>\n",
       "      <td>Construction Spending m/m</td>\n",
       "      <td>0.9%</td>\n",
       "      <td>worse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>2017-01-03 00:00:00 11:00am</td>\n",
       "      <td>69.0</td>\n",
       "      <td>USD</td>\n",
       "      <td>64.8</td>\n",
       "      <td>better</td>\n",
       "      <td>Low</td>\n",
       "      <td>ISM Manufacturing Prices</td>\n",
       "      <td>65.5</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>2017-01-03 00:00:00 12:00am</td>\n",
       "      <td>17.9M</td>\n",
       "      <td>USD</td>\n",
       "      <td>17.5M</td>\n",
       "      <td>better</td>\n",
       "      <td>Low</td>\n",
       "      <td>Total Vehicle Sales</td>\n",
       "      <td>17.5M</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      date_time actual country forecast forecast_error impact  \\\n",
       "26  2017-01-02 00:00:00 10:45am   55.1     USD     55.0       accurate    Low   \n",
       "32  2017-01-03 00:00:00 11:00am   59.7     USD     58.1         better   High   \n",
       "33  2017-01-03 00:00:00 11:00am   0.8%     USD     0.6%       accurate    Low   \n",
       "34  2017-01-03 00:00:00 11:00am   69.0     USD     64.8         better    Low   \n",
       "35  2017-01-03 00:00:00 12:00am  17.9M     USD    17.5M         better    Low   \n",
       "\n",
       "                          new previous previous_error  \n",
       "26    Final Manufacturing PMI     55.0       accurate  \n",
       "32      ISM Manufacturing PMI     58.2       accurate  \n",
       "33  Construction Spending m/m     0.9%          worse  \n",
       "34   ISM Manufacturing Prices     65.5       accurate  \n",
       "35        Total Vehicle Sales    17.5M       accurate  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017_USA = ff_2017[ff_2017['country'] == 'USD'] \n",
    "ff_2017_USA = ff_2017_USA[ff_2017_USA['forecast'].notnull()]\n",
    "ff_2017_USA.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "888"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ff_2017_USA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How many news do we have? Sorted by impact degree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let´s create a dataframe for them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "High: 304 - Medium: 243 - Low: 341\n"
     ]
    }
   ],
   "source": [
    "ff_2017_USA_high = ff_2017_USA[ff_2017_USA['impact'] == 'High']\n",
    "ff_2017_USA_medium = ff_2017_USA[ff_2017_USA['impact'] == 'Medium']\n",
    "ff_2017_USA_low = ff_2017_USA[ff_2017_USA['impact'] == 'Low']\n",
    "\n",
    "print('High: ' + str(len(ff_2017_USA_high)) + ' - Medium: ' + str(len(ff_2017_USA_medium)) + ' - Low: ' + str(len(ff_2017_USA_low)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our news of interest are those with higher expected impact on the market. Let´s see how many of them do we have"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of news, high: 22 - med: 27 - low: 30\n"
     ]
    }
   ],
   "source": [
    "print('number of news, high: ' + \n",
    "      str(len(ff_2017_USA_high.groupby('new').impact.count())) +\n",
    "      ' - med: ' +\n",
    "        str(len(ff_2017_USA_medium.groupby('new').impact.count())) +\n",
    "      ' - low: ' + \n",
    "        str(len(ff_2017_USA_low.groupby('new').impact.count())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "new\n",
       "ADP Non-Farm Employment Change    13\n",
       "Advance GDP q/q                    4\n",
       "Average Hourly Earnings m/m       13\n",
       "Building Permits                  12\n",
       "CB Consumer Confidence            12\n",
       "CPI m/m                           12\n",
       "Core CPI m/m                      12\n",
       "Core Durable Goods Orders m/m     12\n",
       "Core Retail Sales m/m             12\n",
       "Crude Oil Inventories             53\n",
       "Federal Funds Rate                 6\n",
       "Final GDP q/q                      4\n",
       "ISM Manufacturing PMI             13\n",
       "ISM Non-Manufacturing PMI         13\n",
       "Non-Farm Employment Change        13\n",
       "PPI m/m                           12\n",
       "Philly Fed Manufacturing Index     4\n",
       "Prelim GDP q/q                     4\n",
       "Prelim UoM Consumer Sentiment      4\n",
       "Retail Sales m/m                  12\n",
       "Unemployment Claims               51\n",
       "Unemployment Rate                 13\n",
       "Name: impact, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017_USA_high.groupby('new').impact.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hmmm, not that many..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to know which meassure unit is used per each macroeconomic new, so that we can compute the error rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "new\n",
       "ADP Non-Farm Employment Change      250K\n",
       "Advance GDP q/q                     3.0%\n",
       "Average Hourly Earnings m/m         0.3%\n",
       "Building Permits                   1.30M\n",
       "CB Consumer Confidence             122.1\n",
       "CPI m/m                             0.4%\n",
       "Core CPI m/m                        0.1%\n",
       "Core Durable Goods Orders m/m      -0.1%\n",
       "Core Retail Sales m/m               1.0%\n",
       "Crude Oil Inventories              -7.4M\n",
       "Federal Funds Rate                <1.50%\n",
       "Final GDP q/q                       3.2%\n",
       "ISM Manufacturing PMI               59.7\n",
       "ISM Non-Manufacturing PMI           55.9\n",
       "Non-Farm Employment Change          148K\n",
       "PPI m/m                             0.4%\n",
       "Philly Fed Manufacturing Index      22.0\n",
       "Prelim GDP q/q                      3.3%\n",
       "Prelim UoM Consumer Sentiment       98.0\n",
       "Retail Sales m/m                    0.8%\n",
       "Unemployment Claims                 250K\n",
       "Unemployment Rate                   4.1%\n",
       "Name: actual, dtype: object"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017_USA_high.groupby('new').actual.first()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'0.3' - 100%\n",
    "1    - x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200.00000000000003"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abs(0.9-0.3)*100/abs(0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_type(value):\n",
    "\n",
    "    if value.find('K') != -1: return 'K'\n",
    "    elif value.find('M') != -1: return 'M'\n",
    "    elif value.find('%') != -1: return '%'\n",
    "    elif value.find('<') != -1: return '<'\n",
    "    else: return 'F'\n",
    "    \n",
    "    \n",
    "def compute_error(forecasted, actual, fftype):\n",
    "    \n",
    "    magnitude = 1\n",
    "    if fftype == 'K' : magnitude = 1000\n",
    "    elif fftype == 'M': magnitude = 1000000\n",
    "        \n",
    "    f = float(forecasted.split(fftype)[0]) * magnitude\n",
    "    a = float(actual.split(fftype)[0]) * magnitude\n",
    "    diff_per = abs(a-f)*100/abs(f)\n",
    "    \n",
    "    sign = 1 if f >= a else -1\n",
    "    \n",
    "    return diff_per * sign\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'%'"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_type('<1.5%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50.0"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compute_error('0.8%', '0.4%', '%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-41-999e9ae9008a>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-41-999e9ae9008a>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    abs(250k - 251k)\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "abs(250k - 251k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "new\n",
       "ADP Non-Farm Employment Change    13\n",
       "Advance GDP q/q                    4\n",
       "Average Hourly Earnings m/m       13\n",
       "Building Permits                  12\n",
       "CB Consumer Confidence            12\n",
       "CPI m/m                           12\n",
       "Core CPI m/m                      12\n",
       "Core Durable Goods Orders m/m     12\n",
       "Core Retail Sales m/m             12\n",
       "Crude Oil Inventories             53\n",
       "Federal Funds Rate                 6\n",
       "Final GDP q/q                      4\n",
       "ISM Manufacturing PMI             13\n",
       "ISM Non-Manufacturing PMI         13\n",
       "Non-Farm Employment Change        13\n",
       "PPI m/m                           12\n",
       "Philly Fed Manufacturing Index     4\n",
       "Prelim GDP q/q                     4\n",
       "Prelim UoM Consumer Sentiment      4\n",
       "Retail Sales m/m                  12\n",
       "Unemployment Claims               51\n",
       "Unemployment Rate                 13\n",
       "Name: impact, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017_USA_high.groupby('new').impact.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "new\n",
       "Advance GDP Price Index q/q          4\n",
       "Capacity Utilization Rate           12\n",
       "Chicago PMI                         12\n",
       "Core PCE Price Index m/m            12\n",
       "Core PPI m/m                        12\n",
       "Current Account                      4\n",
       "Durable Goods Orders m/m            12\n",
       "Empire State Manufacturing Index    12\n",
       "Employment Cost Index q/q            4\n",
       "Existing Home Sales                 12\n",
       "Factory Orders m/m                  12\n",
       "Federal Funds Rate                   2\n",
       "Housing Starts                      12\n",
       "Import Prices m/m                   12\n",
       "Industrial Production m/m           12\n",
       "JOLTS Job Openings                  10\n",
       "New Home Sales                      12\n",
       "Pending Home Sales m/m              12\n",
       "Personal Spending m/m               12\n",
       "Philly Fed Manufacturing Index       8\n",
       "Prelim Nonfarm Productivity q/q      4\n",
       "Prelim Unit Labor Costs q/q          4\n",
       "Prelim UoM Consumer Sentiment        8\n",
       "Revised Nonfarm Productivity q/q     2\n",
       "Revised UoM Consumer Sentiment      12\n",
       "Trade Balance                       11\n",
       "Unemployment Claims                  2\n",
       "Name: impact, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017_USA_medium.groupby('new').impact.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>2017-12-13 00:00:00 3:00pm</td>\n",
       "      <td>&lt;1.50%</td>\n",
       "      <td>USD</td>\n",
       "      <td>&lt;1.50%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>High</td>\n",
       "      <td>Federal Funds Rate</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>852</th>\n",
       "      <td>2017-11-01 00:00:00 2:00pm</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>USD</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Federal Funds Rate</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1369</th>\n",
       "      <td>2017-09-20 00:00:00 2:00pm</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>USD</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>High</td>\n",
       "      <td>Federal Funds Rate</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2044</th>\n",
       "      <td>2017-07-26 00:00:00 2:00pm</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>USD</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Federal Funds Rate</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2536</th>\n",
       "      <td>2017-06-14 00:00:00 2:00pm</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>USD</td>\n",
       "      <td>&lt;1.25%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>High</td>\n",
       "      <td>Federal Funds Rate</td>\n",
       "      <td>&lt;1.00%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3081</th>\n",
       "      <td>2017-05-03 00:00:00 2:00pm</td>\n",
       "      <td>&lt;1.00%</td>\n",
       "      <td>USD</td>\n",
       "      <td>&lt;1.00%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>High</td>\n",
       "      <td>Federal Funds Rate</td>\n",
       "      <td>&lt;1.00%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3706</th>\n",
       "      <td>2017-03-15 00:00:00 2:00pm</td>\n",
       "      <td>&lt;1.00%</td>\n",
       "      <td>USD</td>\n",
       "      <td>&lt;1.00%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>High</td>\n",
       "      <td>Federal Funds Rate</td>\n",
       "      <td>&lt;0.75%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4277</th>\n",
       "      <td>2017-02-01 00:00:00 3:00pm</td>\n",
       "      <td>&lt;0.75%</td>\n",
       "      <td>USD</td>\n",
       "      <td>&lt;0.75%</td>\n",
       "      <td>accurate</td>\n",
       "      <td>High</td>\n",
       "      <td>Federal Funds Rate</td>\n",
       "      <td>&lt;0.75%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       date_time  actual country forecast forecast_error  \\\n",
       "259   2017-12-13 00:00:00 3:00pm  <1.50%     USD   <1.50%       accurate   \n",
       "852   2017-11-01 00:00:00 2:00pm  <1.25%     USD   <1.25%       accurate   \n",
       "1369  2017-09-20 00:00:00 2:00pm  <1.25%     USD   <1.25%       accurate   \n",
       "2044  2017-07-26 00:00:00 2:00pm  <1.25%     USD   <1.25%       accurate   \n",
       "2536  2017-06-14 00:00:00 2:00pm  <1.25%     USD   <1.25%       accurate   \n",
       "3081  2017-05-03 00:00:00 2:00pm  <1.00%     USD   <1.00%       accurate   \n",
       "3706  2017-03-15 00:00:00 2:00pm  <1.00%     USD   <1.00%       accurate   \n",
       "4277  2017-02-01 00:00:00 3:00pm  <0.75%     USD   <0.75%       accurate   \n",
       "\n",
       "      impact                 new previous previous_error  \n",
       "259     High  Federal Funds Rate   <1.25%       accurate  \n",
       "852   Medium  Federal Funds Rate   <1.25%       accurate  \n",
       "1369    High  Federal Funds Rate   <1.25%       accurate  \n",
       "2044  Medium  Federal Funds Rate   <1.25%       accurate  \n",
       "2536    High  Federal Funds Rate   <1.00%       accurate  \n",
       "3081    High  Federal Funds Rate   <1.00%       accurate  \n",
       "3706    High  Federal Funds Rate   <0.75%       accurate  \n",
       "4277    High  Federal Funds Rate   <0.75%       accurate  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017_USA[ff_2017_USA['new'] == 'Federal Funds Rate']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let´s see how many times forex factory publishes a wrong forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "forecast_error\n",
       "accurate    307\n",
       "better      294\n",
       "worse       287\n",
       "Name: impact, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017_USA.groupby('forecast_error').impact.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cool, forexfactory.com publishes non-accurate forecasts around 2/3 of the times !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>previous</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>High</td>\n",
       "      <td>ADP Non-Farm Employment Change</td>\n",
       "      <td>accurate</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>High</td>\n",
       "      <td>ADP Non-Farm Employment Change</td>\n",
       "      <td>better</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>High</td>\n",
       "      <td>ADP Non-Farm Employment Change</td>\n",
       "      <td>worse</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>High</td>\n",
       "      <td>Advance GDP q/q</td>\n",
       "      <td>better</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>High</td>\n",
       "      <td>Advance GDP q/q</td>\n",
       "      <td>worse</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  impact                             new forecast_error  previous\n",
       "0   High  ADP Non-Farm Employment Change       accurate         3\n",
       "1   High  ADP Non-Farm Employment Change         better         7\n",
       "2   High  ADP Non-Farm Employment Change          worse         3\n",
       "3   High                 Advance GDP q/q         better         2\n",
       "4   High                 Advance GDP q/q          worse         2"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2017_summary = ff_2017_USA.groupby(['impact', 'new', 'forecast_error']).previous.count().reset_index()\n",
    "ff_2017_summary.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "197"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ff_2017_summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "eur_usd = pd.read_csv(data_directory_rates + 'EURUSD.txt', parse_dates=[[1,2]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>ticker</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>col</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2001-01-02 23:01:00</td>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2001-01-02 23:02:00</td>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9505</td>\n",
       "      <td>0.9505</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2001-01-02 23:03:00</td>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9505</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>0.9505</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2001-01-02 23:04:00</td>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2001-01-02 23:05:00</td>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             datetime  ticker    open    high     low   close  col\n",
       "0 2001-01-02 23:01:00  EURUSD  0.9507  0.9507  0.9507  0.9507    4\n",
       "1 2001-01-02 23:02:00  EURUSD  0.9506  0.9506  0.9505  0.9505    4\n",
       "2 2001-01-02 23:03:00  EURUSD  0.9505  0.9507  0.9505  0.9506    4\n",
       "3 2001-01-02 23:04:00  EURUSD  0.9506  0.9506  0.9506  0.9506    4\n",
       "4 2001-01-02 23:05:00  EURUSD  0.9506  0.9506  0.9506  0.9506    4"
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eur_usd.columns = ['datetime', 'ticker', 'open', 'high', 'low', 'close', 'col']\n",
    "eur_usd.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime    datetime64[ns]\n",
       "ticker              object\n",
       "open               float64\n",
       "high               float64\n",
       "low                float64\n",
       "close              float64\n",
       "col                  int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eur_usd.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to ensure that timezones match for all the datasets we are going to work with.\n",
    "\n",
    "News from Forexfactory were downloaded setting the timezone to GMT -5 (Daylight Saving Time on). \n",
    "Forexite data was downloaded with timezone equal to GMT (no Daylight Saving Time)  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [],
   "source": [
    "eur_usd = eur_usd.set_index('datetime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>col</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2001-01-02 23:01:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001-01-02 23:02:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9505</td>\n",
       "      <td>0.9505</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001-01-02 23:03:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9505</td>\n",
       "      <td>0.9507</td>\n",
       "      <td>0.9505</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001-01-02 23:04:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001-01-02 23:05:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>0.9506</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     ticker    open    high     low   close  col\n",
       "datetime                                                        \n",
       "2001-01-02 23:01:00  EURUSD  0.9507  0.9507  0.9507  0.9507    4\n",
       "2001-01-02 23:02:00  EURUSD  0.9506  0.9506  0.9505  0.9505    4\n",
       "2001-01-02 23:03:00  EURUSD  0.9505  0.9507  0.9505  0.9506    4\n",
       "2001-01-02 23:04:00  EURUSD  0.9506  0.9506  0.9506  0.9506    4\n",
       "2001-01-02 23:05:00  EURUSD  0.9506  0.9506  0.9506  0.9506    4"
      ]
     },
     "execution_count": 267,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eur_usd.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2018-10-01 09:45:00</td>\n",
       "      <td>55.6</td>\n",
       "      <td>USD</td>\n",
       "      <td>55.6</td>\n",
       "      <td>accurate</td>\n",
       "      <td>Low</td>\n",
       "      <td>Final Manufacturing PMI</td>\n",
       "      <td>55.6</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2018-10-01 10:00:00</td>\n",
       "      <td>59.8</td>\n",
       "      <td>USD</td>\n",
       "      <td>60.1</td>\n",
       "      <td>accurate</td>\n",
       "      <td>High</td>\n",
       "      <td>ISM Manufacturing PMI</td>\n",
       "      <td>61.3</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2018-10-01 10:00:00</td>\n",
       "      <td>0.1%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.5%</td>\n",
       "      <td>worse</td>\n",
       "      <td>Low</td>\n",
       "      <td>Construction Spending m/m</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2018-10-01 10:00:00</td>\n",
       "      <td>66.9</td>\n",
       "      <td>USD</td>\n",
       "      <td>72.0</td>\n",
       "      <td>worse</td>\n",
       "      <td>Low</td>\n",
       "      <td>ISM Manufacturing Prices</td>\n",
       "      <td>72.1</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>2018-10-02 00:00:00</td>\n",
       "      <td>17.4M</td>\n",
       "      <td>USD</td>\n",
       "      <td>16.8M</td>\n",
       "      <td>better</td>\n",
       "      <td>Low</td>\n",
       "      <td>Total Vehicle Sales</td>\n",
       "      <td>16.7M</td>\n",
       "      <td>accurate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             date_time actual country forecast forecast_error impact  \\\n",
       "24 2018-10-01 09:45:00   55.6     USD     55.6       accurate    Low   \n",
       "25 2018-10-01 10:00:00   59.8     USD     60.1       accurate   High   \n",
       "26 2018-10-01 10:00:00   0.1%     USD     0.5%          worse    Low   \n",
       "27 2018-10-01 10:00:00   66.9     USD     72.0          worse    Low   \n",
       "45 2018-10-02 00:00:00  17.4M     USD    16.8M         better    Low   \n",
       "\n",
       "                          new previous previous_error  \n",
       "24    Final Manufacturing PMI     55.6       accurate  \n",
       "25      ISM Manufacturing PMI     61.3       accurate  \n",
       "26  Construction Spending m/m     0.2%       accurate  \n",
       "27   ISM Manufacturing Prices     72.1       accurate  \n",
       "45        Total Vehicle Sales    16.7M       accurate  "
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2018_USA.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def timeFmt(timeEntry):\n",
    "    inputTime = timeEntry.replace(tzinfo=pytz.timezone(\"US/Eastern\"))\n",
    "    convTime = inputTime.astimezone(pytz.timezone(\"GMT\"))\n",
    "    return convTime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [],
   "source": [
    "ff_2018_USA['date_time2'] = ff_2018_USA['date_time'].apply(lambda x: timeFmt(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "      <th>date_time2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>2018-09-25 10:00:00</td>\n",
       "      <td>119</td>\n",
       "      <td>138.4</td>\n",
       "      <td>USD</td>\n",
       "      <td>132.2</td>\n",
       "      <td>better</td>\n",
       "      <td>High</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>134.7</td>\n",
       "      <td>better</td>\n",
       "      <td>2018-09-25 14:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477</th>\n",
       "      <td>2018-08-28 10:00:00</td>\n",
       "      <td>477</td>\n",
       "      <td>133.4</td>\n",
       "      <td>USD</td>\n",
       "      <td>126.6</td>\n",
       "      <td>better</td>\n",
       "      <td>Medium</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>127.9</td>\n",
       "      <td>better</td>\n",
       "      <td>2018-08-28 14:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>800</th>\n",
       "      <td>2018-07-31 10:00:00</td>\n",
       "      <td>800</td>\n",
       "      <td>127.4</td>\n",
       "      <td>USD</td>\n",
       "      <td>126.5</td>\n",
       "      <td>better</td>\n",
       "      <td>High</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>127.1</td>\n",
       "      <td>better</td>\n",
       "      <td>2018-07-31 14:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1181</th>\n",
       "      <td>2018-06-26 10:00:00</td>\n",
       "      <td>1181</td>\n",
       "      <td>126.4</td>\n",
       "      <td>USD</td>\n",
       "      <td>127.6</td>\n",
       "      <td>worse</td>\n",
       "      <td>High</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>128.8</td>\n",
       "      <td>better</td>\n",
       "      <td>2018-06-26 14:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1531</th>\n",
       "      <td>2018-05-29 10:00:00</td>\n",
       "      <td>1531</td>\n",
       "      <td>128.0</td>\n",
       "      <td>USD</td>\n",
       "      <td>128.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>High</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>125.6</td>\n",
       "      <td>worse</td>\n",
       "      <td>2018-05-29 14:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2027</th>\n",
       "      <td>2018-04-24 10:00:00</td>\n",
       "      <td>2027</td>\n",
       "      <td>128.7</td>\n",
       "      <td>USD</td>\n",
       "      <td>126.0</td>\n",
       "      <td>better</td>\n",
       "      <td>High</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>127.0</td>\n",
       "      <td>worse</td>\n",
       "      <td>2018-04-24 14:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2356</th>\n",
       "      <td>2018-03-27 10:00:00</td>\n",
       "      <td>2356</td>\n",
       "      <td>127.7</td>\n",
       "      <td>USD</td>\n",
       "      <td>131.2</td>\n",
       "      <td>worse</td>\n",
       "      <td>High</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>130.0</td>\n",
       "      <td>worse</td>\n",
       "      <td>2018-03-27 14:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2713</th>\n",
       "      <td>2018-02-27 11:00:00</td>\n",
       "      <td>2713</td>\n",
       "      <td>130.8</td>\n",
       "      <td>USD</td>\n",
       "      <td>126.2</td>\n",
       "      <td>better</td>\n",
       "      <td>High</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>124.3</td>\n",
       "      <td>worse</td>\n",
       "      <td>2018-02-27 16:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3080</th>\n",
       "      <td>2018-01-30 11:00:00</td>\n",
       "      <td>3080</td>\n",
       "      <td>125.4</td>\n",
       "      <td>USD</td>\n",
       "      <td>123.2</td>\n",
       "      <td>better</td>\n",
       "      <td>High</td>\n",
       "      <td>CB Consumer Confidence</td>\n",
       "      <td>123.1</td>\n",
       "      <td>better</td>\n",
       "      <td>2018-01-30 16:00:00+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               date_time  Unnamed: 0 actual country forecast forecast_error  \\\n",
       "119  2018-09-25 10:00:00         119  138.4     USD    132.2         better   \n",
       "477  2018-08-28 10:00:00         477  133.4     USD    126.6         better   \n",
       "800  2018-07-31 10:00:00         800  127.4     USD    126.5         better   \n",
       "1181 2018-06-26 10:00:00        1181  126.4     USD    127.6          worse   \n",
       "1531 2018-05-29 10:00:00        1531  128.0     USD    128.2            NaN   \n",
       "2027 2018-04-24 10:00:00        2027  128.7     USD    126.0         better   \n",
       "2356 2018-03-27 10:00:00        2356  127.7     USD    131.2          worse   \n",
       "2713 2018-02-27 11:00:00        2713  130.8     USD    126.2         better   \n",
       "3080 2018-01-30 11:00:00        3080  125.4     USD    123.2         better   \n",
       "\n",
       "      impact                     new previous previous_error  \\\n",
       "119     High  CB Consumer Confidence    134.7         better   \n",
       "477   Medium  CB Consumer Confidence    127.9         better   \n",
       "800     High  CB Consumer Confidence    127.1         better   \n",
       "1181    High  CB Consumer Confidence    128.8         better   \n",
       "1531    High  CB Consumer Confidence    125.6          worse   \n",
       "2027    High  CB Consumer Confidence    127.0          worse   \n",
       "2356    High  CB Consumer Confidence    130.0          worse   \n",
       "2713    High  CB Consumer Confidence    124.3          worse   \n",
       "3080    High  CB Consumer Confidence    123.1         better   \n",
       "\n",
       "                    date_time2  \n",
       "119  2018-09-25 14:00:00+00:00  \n",
       "477  2018-08-28 14:00:00+00:00  \n",
       "800  2018-07-31 14:00:00+00:00  \n",
       "1181 2018-06-26 14:00:00+00:00  \n",
       "1531 2018-05-29 14:00:00+00:00  \n",
       "2027 2018-04-24 14:00:00+00:00  \n",
       "2356 2018-03-27 14:00:00+00:00  \n",
       "2713 2018-02-27 16:00:00+00:00  \n",
       "3080 2018-01-30 16:00:00+00:00  "
      ]
     },
     "execution_count": 326,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2018_USA[ff_2018_USA['new'] == 'CB Consumer Confidence']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "      <th>date_time2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2662</th>\n",
       "      <td>2018-03-08 09:30:00</td>\n",
       "      <td>2662</td>\n",
       "      <td>231K</td>\n",
       "      <td>USD</td>\n",
       "      <td>220K</td>\n",
       "      <td>worse</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Unemployment Claims</td>\n",
       "      <td>210K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-03-08 14:30:00+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               date_time  Unnamed: 0 actual country forecast forecast_error  \\\n",
       "2662 2018-03-08 09:30:00        2662   231K     USD     220K          worse   \n",
       "\n",
       "      impact                  new previous previous_error  \\\n",
       "2662  Medium  Unemployment Claims     210K            NaN   \n",
       "\n",
       "                    date_time2  \n",
       "2662 2018-03-08 14:30:00+00:00  "
      ]
     },
     "execution_count": 327,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2018_USA[ff_2018_USA['date_time'] == '2018-03-08 09:30:00'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: FutureWarning: pd.TimeGrouper is deprecated and will be removed; Please use pd.Grouper(freq=...)\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>col</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-03-08 00:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2413</td>\n",
       "      <td>1.2413</td>\n",
       "      <td>1.2413</td>\n",
       "      <td>1.2413</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 01:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 02:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2404</td>\n",
       "      <td>1.2404</td>\n",
       "      <td>1.2404</td>\n",
       "      <td>1.2404</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 03:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2405</td>\n",
       "      <td>1.2405</td>\n",
       "      <td>1.2405</td>\n",
       "      <td>1.2405</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 04:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 05:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2408</td>\n",
       "      <td>1.2408</td>\n",
       "      <td>1.2408</td>\n",
       "      <td>1.2408</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 06:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>1.2407</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 07:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2411</td>\n",
       "      <td>1.2411</td>\n",
       "      <td>1.2411</td>\n",
       "      <td>1.2411</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 08:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2412</td>\n",
       "      <td>1.2412</td>\n",
       "      <td>1.2412</td>\n",
       "      <td>1.2412</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 09:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2392</td>\n",
       "      <td>1.2392</td>\n",
       "      <td>1.2392</td>\n",
       "      <td>1.2392</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 10:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2387</td>\n",
       "      <td>1.2387</td>\n",
       "      <td>1.2387</td>\n",
       "      <td>1.2387</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 11:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2377</td>\n",
       "      <td>1.2377</td>\n",
       "      <td>1.2377</td>\n",
       "      <td>1.2377</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 12:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2422</td>\n",
       "      <td>1.2422</td>\n",
       "      <td>1.2422</td>\n",
       "      <td>1.2422</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 13:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2443</td>\n",
       "      <td>1.2443</td>\n",
       "      <td>1.2443</td>\n",
       "      <td>1.2443</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 14:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2402</td>\n",
       "      <td>1.2402</td>\n",
       "      <td>1.2402</td>\n",
       "      <td>1.2402</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 15:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2353</td>\n",
       "      <td>1.2353</td>\n",
       "      <td>1.2353</td>\n",
       "      <td>1.2353</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 16:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2334</td>\n",
       "      <td>1.2334</td>\n",
       "      <td>1.2334</td>\n",
       "      <td>1.2334</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 17:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2320</td>\n",
       "      <td>1.2320</td>\n",
       "      <td>1.2320</td>\n",
       "      <td>1.2320</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 18:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2317</td>\n",
       "      <td>1.2318</td>\n",
       "      <td>1.2316</td>\n",
       "      <td>1.2317</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 19:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2316</td>\n",
       "      <td>1.2317</td>\n",
       "      <td>1.2312</td>\n",
       "      <td>1.2317</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 20:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2311</td>\n",
       "      <td>1.2311</td>\n",
       "      <td>1.2310</td>\n",
       "      <td>1.2310</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 21:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2312</td>\n",
       "      <td>1.2312</td>\n",
       "      <td>1.2312</td>\n",
       "      <td>1.2312</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 22:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2315</td>\n",
       "      <td>1.2316</td>\n",
       "      <td>1.2314</td>\n",
       "      <td>1.2316</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-08 23:00:00</th>\n",
       "      <td>EURUSD</td>\n",
       "      <td>1.2313</td>\n",
       "      <td>1.2313</td>\n",
       "      <td>1.2313</td>\n",
       "      <td>1.2313</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     ticker    open    high     low   close  col\n",
       "datetime                                                        \n",
       "2018-03-08 00:00:00  EURUSD  1.2413  1.2413  1.2413  1.2413    4\n",
       "2018-03-08 01:00:00  EURUSD  1.2407  1.2407  1.2407  1.2407    4\n",
       "2018-03-08 02:00:00  EURUSD  1.2404  1.2404  1.2404  1.2404    4\n",
       "2018-03-08 03:00:00  EURUSD  1.2405  1.2405  1.2405  1.2405    4\n",
       "2018-03-08 04:00:00  EURUSD  1.2407  1.2407  1.2407  1.2407    4\n",
       "2018-03-08 05:00:00  EURUSD  1.2408  1.2408  1.2408  1.2408    4\n",
       "2018-03-08 06:00:00  EURUSD  1.2407  1.2407  1.2407  1.2407    4\n",
       "2018-03-08 07:00:00  EURUSD  1.2411  1.2411  1.2411  1.2411    4\n",
       "2018-03-08 08:00:00  EURUSD  1.2412  1.2412  1.2412  1.2412    4\n",
       "2018-03-08 09:00:00  EURUSD  1.2392  1.2392  1.2392  1.2392    4\n",
       "2018-03-08 10:00:00  EURUSD  1.2387  1.2387  1.2387  1.2387    4\n",
       "2018-03-08 11:00:00  EURUSD  1.2377  1.2377  1.2377  1.2377    4\n",
       "2018-03-08 12:00:00  EURUSD  1.2422  1.2422  1.2422  1.2422    4\n",
       "2018-03-08 13:00:00  EURUSD  1.2443  1.2443  1.2443  1.2443    4\n",
       "2018-03-08 14:00:00  EURUSD  1.2402  1.2402  1.2402  1.2402    4\n",
       "2018-03-08 15:00:00  EURUSD  1.2353  1.2353  1.2353  1.2353    4\n",
       "2018-03-08 16:00:00  EURUSD  1.2334  1.2334  1.2334  1.2334    4\n",
       "2018-03-08 17:00:00  EURUSD  1.2320  1.2320  1.2320  1.2320    4\n",
       "2018-03-08 18:00:00  EURUSD  1.2317  1.2318  1.2316  1.2317    4\n",
       "2018-03-08 19:00:00  EURUSD  1.2316  1.2317  1.2312  1.2317    4\n",
       "2018-03-08 20:00:00  EURUSD  1.2311  1.2311  1.2310  1.2310    4\n",
       "2018-03-08 21:00:00  EURUSD  1.2312  1.2312  1.2312  1.2312    4\n",
       "2018-03-08 22:00:00  EURUSD  1.2315  1.2316  1.2314  1.2316    4\n",
       "2018-03-08 23:00:00  EURUSD  1.2313  1.2313  1.2313  1.2313    4"
      ]
     },
     "execution_count": 323,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eur_usd['20180308':'20180308'].groupby(pd.TimeGrouper('h')).max()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to adjust the forexfactory times, as they were extracted in GMT-5, DST on.\n",
    "We need to set them on GMT and DST off"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "      <th>date_time2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>340</th>\n",
       "      <td>2018-09-13 08:30:00</td>\n",
       "      <td>340</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.3%</td>\n",
       "      <td>worse</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-09-13 08:30:00-04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751</th>\n",
       "      <td>2018-08-10 08:30:00</td>\n",
       "      <td>751</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>0.1%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-08-10 08:30:00-04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1060</th>\n",
       "      <td>2018-07-12 08:30:00</td>\n",
       "      <td>1060</td>\n",
       "      <td>0.1%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>worse</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-07-12 08:30:00-04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1369</th>\n",
       "      <td>2018-06-12 08:30:00</td>\n",
       "      <td>1369</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-06-12 08:30:00-04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1861</th>\n",
       "      <td>2018-05-10 08:30:00</td>\n",
       "      <td>1861</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.3%</td>\n",
       "      <td>worse</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>-0.1%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-05-10 08:30:00-04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2207</th>\n",
       "      <td>2018-04-11 08:30:00</td>\n",
       "      <td>2207</td>\n",
       "      <td>-0.1%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.0%</td>\n",
       "      <td>worse</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-04-11 08:30:00-04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2529</th>\n",
       "      <td>2018-03-13 08:30:00</td>\n",
       "      <td>2529</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.2%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>0.5%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-03-13 08:30:00-04:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2917</th>\n",
       "      <td>2018-02-14 09:30:00</td>\n",
       "      <td>2917</td>\n",
       "      <td>0.5%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.3%</td>\n",
       "      <td>better</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>0.1%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-02-14 09:30:00-05:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3381</th>\n",
       "      <td>2018-01-12 09:30:00</td>\n",
       "      <td>3381</td>\n",
       "      <td>0.1%</td>\n",
       "      <td>USD</td>\n",
       "      <td>0.1%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>High</td>\n",
       "      <td>CPI m/m</td>\n",
       "      <td>0.4%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018-01-12 09:30:00-05:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               date_time  Unnamed: 0 actual country forecast forecast_error  \\\n",
       "340  2018-09-13 08:30:00         340   0.2%     USD     0.3%          worse   \n",
       "751  2018-08-10 08:30:00         751   0.2%     USD     0.2%            NaN   \n",
       "1060 2018-07-12 08:30:00        1060   0.1%     USD     0.2%          worse   \n",
       "1369 2018-06-12 08:30:00        1369   0.2%     USD     0.2%            NaN   \n",
       "1861 2018-05-10 08:30:00        1861   0.2%     USD     0.3%          worse   \n",
       "2207 2018-04-11 08:30:00        2207  -0.1%     USD     0.0%          worse   \n",
       "2529 2018-03-13 08:30:00        2529   0.2%     USD     0.2%            NaN   \n",
       "2917 2018-02-14 09:30:00        2917   0.5%     USD     0.3%         better   \n",
       "3381 2018-01-12 09:30:00        3381   0.1%     USD     0.1%            NaN   \n",
       "\n",
       "     impact      new previous previous_error                date_time2  \n",
       "340    High  CPI m/m     0.2%            NaN 2018-09-13 08:30:00-04:00  \n",
       "751    High  CPI m/m     0.1%            NaN 2018-08-10 08:30:00-04:00  \n",
       "1060   High  CPI m/m     0.2%            NaN 2018-07-12 08:30:00-04:00  \n",
       "1369   High  CPI m/m     0.2%            NaN 2018-06-12 08:30:00-04:00  \n",
       "1861   High  CPI m/m    -0.1%            NaN 2018-05-10 08:30:00-04:00  \n",
       "2207   High  CPI m/m     0.2%            NaN 2018-04-11 08:30:00-04:00  \n",
       "2529   High  CPI m/m     0.5%            NaN 2018-03-13 08:30:00-04:00  \n",
       "2917   High  CPI m/m     0.1%            NaN 2018-02-14 09:30:00-05:00  \n",
       "3381   High  CPI m/m     0.4%            NaN 2018-01-12 09:30:00-05:00  "
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2018_USA[ff_2018_USA['new'] == 'CPI m/m']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_time</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>actual</th>\n",
       "      <th>country</th>\n",
       "      <th>forecast</th>\n",
       "      <th>forecast_error</th>\n",
       "      <th>impact</th>\n",
       "      <th>new</th>\n",
       "      <th>previous</th>\n",
       "      <th>previous_error</th>\n",
       "      <th>date_time2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [date_time, Unnamed: 0, actual, country, forecast, forecast_error, impact, new, previous, previous_error, date_time2]\n",
       "Index: []"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ff_2018_USA[ff_2018_USA['new'] == 'Non-Economic,Daylight Saving Time Shift']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
